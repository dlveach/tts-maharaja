--[[///////////////////////////////////////////////////////////////////////////////////////////////
Maharaja player action dial

  --TODO:
    - object UI wrapper
    - save/load/restore state
    - connections to Global

///////////////////////////////////////////////////////////////////////////////////////////////////]]


g_buttons = {"track","coins","character","palace-house","palace","quarry","move","2houses","house",}
g_pointer_rot_offsets = {184,142,104,64,28,-15,-55,-95,-135}
g_pointer = {
  name = "pointer-1",
  url = "http://cloud-3.steamusercontent.com/ugc/2019340792116360259/E5713D1160D784E5B340DCF8D114569C9E560938/",
  position = Vector(0.01,0.1,-0.05),
  rotation = Vector(90, 180, 0),
  scale = Vector(2,2,1),
}
g_back_decal = {
  name = "dial_back",
  url = "http://cloud-3.steamusercontent.com/ugc/2019340792119743844/FBF1CD3789663DD96F5C9D218ED931973551A259/",
  position = Vector(0.08,-0.06,-0.03),
  rotation = Vector(270,0,0),
  scale = Vector(5.1,5.1,1),
}
g_player_colors = {"Yellow","Red","Green","Blue","Purple"}

g_action_labels = {
	["track"] = "Governor Track",
	["coins"] = "Get 2 Gold",
	["character"] = "Exchange Character",
	["palace-house"] = "Build a Palace + House",
	["palace"] = "Build a Palace",
	["quarry"] = "Quarry 2 Houses",
	["move"] = "Move a House",
	["2houses"] = "Build 2 Houses",
	["house"] = "Build 1 House",
 }

env = {}
-- env.test = {}
-- env.test.force_fresh_save = true
-- env.test.trace = true
-- env.test.debug = true

--[[ *****************************
Load function
********************************]]
function onLoad(save_state)
  GD = {}
  GD.color = self.getName()
  env = Global.getTable("env")
  if save_state ~= "" then
    if env.test.trace then log(GD.color..": onLoad(): Loading from saved state") end
    local restore_data = JSON.decode(saved_data)
    GD = restore_data

    --TODO: restore UI state
    --TODO: do decals survive reload?

  else
    if env.test.trace then log(GD.color..": onLoad(): Loading from fresh state") end
    GD.state = {}
    GD.state.action_1 = ""
    GD.state.action_2 = ""
    GD.state.action_3 = ""
    GD.state.click = 0
    GD.state.stage = "select_actions"
    --setup visibility string
    GD.hide_from_players = {}
    for _,pcol in ipairs(g_player_colors) do
      if pcol ~= GD.color then
        table.insert(GD.hide_from_players, pcol)
      end
    end
    --setup dial decals
    self.setDecals({})
    local p = simpleDeepCopy(g_pointer)
    p.name = "pointer-1"
    self.addDecal(p)
    p.name = "pointer-2"
    self.addDecal(p)
    self.addDecal(g_back_decal)
    --setup button visiblity
    for _,btn in ipairs(g_buttons) do
      self.UI.setAttribute(btn.."_panel","visibility",GD.color)
    end
    if not(env.test.in_dev) then
      resetPlayerButtons()
    end
  end
end

--[[ *****************************
--TODO: document
********************************]]
function onSave()
  local saved_data = JSON.encode(GD)
  if env.test.force_fresh_save then
    saved_data = ""
  end
  return saved_data
end

function resetPlayerButtons()
  if env.test.trace then log(GD.color..": resetPlayerButtons()") end
  self.UI.setAttribute("player_btn_panel","active",false)
  self.UI.setAttribute("confirmBtnRow","active",false)
  self.UI.setAttribute("extraActionBtnRow","active",false)
  self.UI.setAttribute("emptyBtnRow","active",true)
  self.UI.setAttribute("player_btn_panel","visibility",GD.color)
  self.UI.setAttribute("back_button_panel","visibility",GD.color)
  self.UI.setAttribute("action_A_row","active",false)
  self.UI.setAttribute("action_B_row","active",false)
  self.UI.setAttribute("action_C_row","active",false)
end

--[[ *****************************
--TODO: document
********************************]]
function  resetActionPointers()
  if env.test.trace then log(GD.color..": resetActionPointers()") end
  local decals = self.getDecals()
  local rot = self.getRotation()
  assert(decals[1] ~= nil and decals[1].name == "pointer-1", GD.color..": ERROR: setPointerRotation(): Invalid pointer 1 decal")
  assert(decals[2] ~= nil and decals[2].name == "pointer-2", GD.color..": ERROR: setPointerRotation(): Invalid pointer 2 decal")
  decals[1].rotation.z = rot.z + 180
  decals[2].rotation.z = rot.z + 180
  self.setDecals(decals)
end

--[[ *****************************
--TODO: document
********************************]]
function setToActivePlayer()
  if env.test.trace then log(GD.color..": setToActivePlayer()") end
  disableDialButtons()
  if GD.state.flipped then flipMe() end
  showMe()
end

--[[ *****************************
--TODO: document
********************************]]
function setToActionSelection()
  if env.test.trace then log(GD.color..": setToActionSelection()") end
  self.UI.setAttribute("back_button_panel","active",true)
  GD.state.action_1 = ""
  GD.state.action_2 = ""
  GD.state.action_3 = ""
  GD.state.click = 0
  enableDialButtons()
  resetPlayerButtons()
  resetActionPointers()
  if GD.state.flipped then flipMe() end
end

--[[ *****************************
--TODO: document
********************************]]
function setState(params)
  if env.test.trace then log(GD.color..": setState()") end
  if env.test.debug then log(params) end
  if params.state == "select_actions" then
    GD.state.stage = "select_actions"
    enableDialButtons()
    resetPlayerButtons()
    hideMe()
    flipMe()
  elseif params.state == "player_turn" then
    GD.state.stage = "player_turn"
    self.UI.setAttribute("player_btn_panel","visibility","")
    self.UI.setAttribute("confirmBtnRow","active",false)
    if params.extra_actions then
      self.UI.setAttribute("extraActionBtnRow","active",true)
    else
      self.UI.setAttribute("emptyBtnRow","active",true)
    end
    flipMe()
    showMe()
    Wait.frames(function() reloadUI() end, 1)    --HACK:
  else
    log(GD.color..": ERROR: setState() unknown state")
  end
end

--[[ *****************************
--TODO: document
********************************]]
function enableDialButtons()
  if env.test.trace then log(GD.color..": enableDialButtons()") end
  for _,action in ipairs(g_buttons) do
    self.UI.setAttribute(action.."_panel","active","true")
  end
end

--[[ *****************************
--TODO: document
********************************]]
function disableDialButtons()
  if env.test.trace then log(GD.color..": disableDialButtons()") end
  for _,action in ipairs(g_buttons) do
    self.UI.setAttribute(action.."_panel","active","false")
  end
end

--[[ *****************************
--TODO: document
********************************]]
function lockActionSelections()
  if env.test.trace then log(GD.color..": lockActionSelections()") end
  self.UI.setAttribute("back_button_panel","active",false)
end

--[[ *****************************
--TODO: document
********************************]]
function buttonClick(player, btn, id)
  if env.test.trace then log(GD.color..": buttonClick(): id="..tostring(id)) end
  if player.color ~= GD.color then return end
  if id == "confirm" then
    disableDialButtons()
    flipMe()
    self.UI.setAttribute("back_button_panel","active",true)
    Wait.condition(function() showMe() end, function() return self.resting end, 3)
    --call global to set player action selections
    local p = {
      command = "confirm",
      player_color=player.color,
      actions = {
        GD.state.action_1,
        GD.state.action_2,
        GD.state.action_3,
      },
    }
    Global.call("setPlayerActions",p)
  elseif id =="modify" then
    --call global to clear player action selection
    hideMe()
    enableDialButtons()
    flipMe()
    local p = {command="clear", player_color=player.color,}
    Global.call("setPlayerActions",p)
  elseif id == "action-A" then
    if GD.state.stage == "player_turn" then
      log(GD.color..": TODO: buttonClick() handle action A")
      self.UI.setAttribute("action-A","active",false)
    end
  elseif id == "action-B" then
    if GD.state.stage == "player_turn" then
      log(GD.color..": TODO: buttonClick() handle action B")
      self.UI.setAttribute("action-B","active",false)
    end
  elseif id == "action-C" then
    if GD.state.stage == "player_turn" then
      log(GD.color..": TODO: buttonClick() handle action C")
      self.UI.setAttribute("action-C","active",false)
    end
  elseif id =="extra_action" then
    if GD.state.stage == "player_turn" then
      log(GD.color..": TODO: buttonClick() extra action button")
    end
  else
    log(GD.color..": ERROR: buttonClick() unknown button id")
  end
end

--[[ *****************************
--TODO: document
********************************]]
function dialClick(player, btn, id)
  if env.test.trace then log(GD.color..": dialClick(): id="..tostring(id)) end
  local action = Split(id,'_')[1]
  local index = indexOf(g_buttons,action)
  local button_label = g_action_labels[action]
  local id = ""
  assert(index > 0, GD.color..": ERROR: dialClick() no button index found for action")
  if GD.state.extra_action then
    --TODO: handle this
  end
  if GD.state.click == 1 or GD.state.click == 0 then
    GD.state.action_1 = action
    id = "pointer-1"
    self.UI.setAttribute("action_A_txt","text",button_label)
    self.UI.setAttribute("action_A_row","active",true)
    self.UI.setAttribute("action-A","active",true)
    GD.state.click = 2
  elseif GD.state.click == 2 then
    GD.state.action_2 = action
    id = "pointer-2"
    GD.state.click = 1
    self.UI.setAttribute("action_B_txt","text",button_label)
    self.UI.setAttribute("action_B_row","active",true)
    self.UI.setAttribute("action-B","active",true)
    self.UI.setAttribute("emptyBtnRow","active",false)
    self.UI.setAttribute("confirmBtnRow","active",true)
  elseif GD.state.click == 3 then
    log(GD.color..": TODO: dialClick() handle extra action click")
  end
  setPointerRotation(id, index)
  if toboolean(self.UI.getAttribute("player_btn_panel","active")) == false then
    self.UI.setAttribute("player_btn_panel","active",true)
  --HACK: no idea why but need this to get table columns to size right
    Wait.frames(function() reloadUI() end, 1)
  end
end

--[[ *****************************
--TODO: document
********************************]]
function setPointerRotation(id, index)
  local decals = self.getDecals()
  local rot = self.getRotation()
  local offset = g_pointer_rot_offsets[index]
  assert(decals[1] ~= nil and decals[1].name == "pointer-1", GD.color..": ERROR: setPointerRotation(): Invalid pointer 1 decal")
  assert(decals[2] ~= nil and decals[2].name == "pointer-2", GD.color..": ERROR: setPointerRotation(): Invalid pointer 2 decal")
  if id == decals[1].name then
    decals[1].rotation.z = rot.z + offset
  elseif id == decals[2].name then
    decals[2].rotation.z = rot.z + offset
  else
    log(GD.color..": ERROR: setPointerRotation(): Decal id "..tostring(id).." not found")
    return
  end
  self.setDecals(decals)
end

--[[ *****************************
--TODO: document
********************************]]
function hideMe()
  self.setInvisibleTo(GD.hide_from_players)
end

--[[ *****************************
--TODO: document
********************************]]
function showMe()
  self.setInvisibleTo({})
end

--[[ *****************************
--TODO: document
********************************]]
function flipMe()
  if not(GD.state.flipped) then
    --turn display off before flipping to avoid weird UI movement
    self.UI.setAttribute("player_btn_panel","active",false)
  end
  self.setLock(false)
  self.flip()
  Wait.condition(function()
    self.setLock(true)
    GD.state.flipped = self.is_face_down
    self.UI.setAttribute("player_btn_panel","active",not(GD.state.flipped))
  end, function() return self.resting end, 3)
end

--[[ *****************************
--TODO: document
********************************]]
function dumpData(params)
  log("State data for "..self.getGUID()..": "..GD.color)
  log(GD)
end

--[[ *****************************
--TODO: document
HACK: this for some reason is needed to get table columnWidths to work
when player_btn_panel is shown
********************************]]
function reloadUI()
  if env.test.trace then log(GD.color..": reloadUI()") end
  self.UI.setXmlTable(self.UI.getXmlTable())
end

require("tts-lib/utils")
