--[[///////////////////////////////////////////////////////////////////////////////////////////////
Maharaja player action dial

  --TODO:
    - IN WORK review all Global calls, design has iterated and some may need cleanup, unused etc.
        --mostly done, refactored a lot into setState()
    - implement "extra action" pointer and support

  --TODO: move g_ constants to C. Constants.ttslua definitions, merge g_player_colors, g_buttons to global definitions.

///////////////////////////////////////////////////////////////////////////////////////////////////]]


g_buttons = {"track","coins","character","palace-house","palace","quarry","move","2houses","house",}
g_pointer_rot_offsets = {184,142,104,64,28,-15,-55,-95,-135}
g_pointer = {
  name = "pointer-1",
  url = "http://cloud-3.steamusercontent.com/ugc/2019340792116360259/E5713D1160D784E5B340DCF8D114569C9E560938/",
  position = Vector(0.01,0.1,-0.05),
  rotation = Vector(90, 180, 0),
  scale = Vector(2,2,1),
}
g_extra_pointer = {
  name = "pointer-extra",
  url = "http://cloud-3.steamusercontent.com/ugc/2019341512250290332/123CEA34583ED4E97E4616055B24ED7AC7D2A982/",
  position = Vector(0.01,0.1,-0.05),
  rotation = Vector(90, 180, 0),
  scale = Vector(2,2,1),
}
g_back_decal = {
  name = "dial_back",
  url = "http://cloud-3.steamusercontent.com/ugc/2019340792119743844/FBF1CD3789663DD96F5C9D218ED931973551A259/",
  position = Vector(0.08,-0.06,-0.03),
  rotation = Vector(270,0,0),
  scale = Vector(5.1,5.1,1),
}
g_player_colors = {"Yellow","Red","Green","Blue","Purple"}

env = {}

--[[ *****************************
TTS Load function
********************************]]
function onLoad(saved_data)
  GD = {}
  GD.color = self.getName()
  gid = GD.color.."_dial"
  env = Global.getTable("env")
  assert(env, "*** ERROR: no env from Global")
  if saved_data ~= "" then
    if env.test.trace then log(gid..": onLoad(): Loading from saved state") end
    local restore_data = JSON.decode(saved_data)
    GD = restore_data
    self.UI.setAttribute("back_button_panel","visibility",GD.color)
    for i=1,9 do self.UI.setAttribute("dialBtnPnl_"..tostring(i),"visibility",GD.color) end
    if GD.state.buttons_enabled then enableDialButtons() else disableDialButtons() end
    if GD.state.back_button_enabled then enableBackButton() else disableBackButton() end
    if GD.state.hidden then hideMe() else showMe() end
    if GD.state.action_UI_enabled then enableActionUI() else disableActionUI() end

    log(gid..": onLoad() save/restore pointer direction?")
  else
    if env.test.trace then log(gid..": onLoad(): Loading from fresh state") end
    GD.state = {}
    GD.state.click = 0
    GD.state.flipped = self.is_face_down
    GD.state.extra_action = false
    GD.state.buttons_enabled = false
    GD.state.hidden = false
    GD.state.action_UI_enabled = false
    --setup player visibility string for hiding self
    GD.hide_from_players = {}
    for _,pcol in ipairs(g_player_colors) do
      if pcol ~= GD.color then
        table.insert(GD.hide_from_players, pcol)
      end
    end
    self.setDecals({})
    local rot = self.getRotation()
    local p = simpleDeepCopy(g_pointer)
    p.rotation.z = rot.z + 180
    p.name = "pointer-1"
    self.addDecal(p)
    p.name = "pointer-2"
    self.addDecal(p)
    self.addDecal(g_back_decal)
    for i=1,9 do self.UI.setAttribute("dialBtnPnl_"..tostring(i),"visibility",GD.color) end
    self.UI.setAttribute("back_button_panel","visibility",GD.color)
    for i=1,7 do
      self.UI.setAttribute("row_action_"..tostring(i),"active",false)
    end
  end
end

--[[ *****************************
TTS save function
********************************]]
function onSave()
  local saved_data = ""
  if env and not(env.test.force_fresh_save) then
    saved_data = JSON.encode(GD)
  end
  return saved_data
end

--[[ ******** TODO: DEPRECATED *********
Update action UI panel based on current state.
********************************]]
function updateUI()
  log(gid..": ***WARN: updateUI() is deprecated")
end

--[[ *****************************
Reset pointers 1 & 2 rotation to default (180 deg).
Remove Extra Action pointer if exists
********************************]]
function reset()
  if env.test.trace then log(gid..": reset()") end
  local decals = self.getDecals()
  local rot = self.getRotation()
  local extra = -1
  for i,decal in ipairs(decals) do
    if i==1 then assert(decal.name == "pointer-1", gid..": ERROR: setPointerRotation(): Invalid pointer 1 decal") end
    if i==2 then assert(decal.name == "pointer-2", gid..": ERROR: setPointerRotation(): Invalid pointer 2 decal") end
    if decal.name == "pointer-extra" then extra = i end
  end
  decals[1].rotation.z = rot.z
  decals[2].rotation.z = rot.z
  if extra > 0 then table.remove(decals,extra) end
  self.setDecals(decals)
end

--[[ *****************************
Remove Extra Action pointer if exists
********************************]]
function removeExtraActionPointer()
  local decals = self.getDecals()
  local extra = -1
  for i,decal in ipairs(decals) do
    if decal.name == "pointer-extra" then extra = i end
  end
  if extra > 0 then table.remove(decals,extra) end
  self.setDecals(decals)
end

--[[ ******* DEPRECATED *******
Set this dial's state.  Called from Global.
--TODO: document
********************************]]
function setState(params)
  log(gid..": setState() is deprecated")

  -- if env.test.trace then log(gid..": setState()") end
  -- if env.test.debug then log(params) end
  -- if params.state == "select_actions" then
  --   GD.state.stage = "select_actions"
  --   if params.reset then resetActions() end
  --   enableDialButtons()
  --   hideMe()
  --   if GD.state.flipped then flipMe() end
  -- elseif params.state == "actions_selected" then
  --   if not(GD.state.flipped) then flipMe() end
  --   self.UI.setAttribute("back_button_panel","active",(params.modify ~= nil and params.modify))
  --   GD.state.stage = "actions_selected"
  -- elseif params.state == "actions_locked" then
  --   self.UI.setAttribute("back_button_panel","active",false)
  --   if not(GD.state.flipped) then flipMe() end
  --   GD.state.stage = "actions_locked"
  --   showMe()
  -- elseif params.state =="extra_action" then
  --   GD.state.stage = "extra_action"
  --   enableDialButtons()
  --
  --   --TODO: what about during a player turn?
  --
  --   if GD.state.flipped then flipMe() end
  -- elseif params.state == "player_turn" then
  --   GD.state.stage = "player_turn"
  --   log("flipped state = "..tostring(GD.state.flipped))
  --   self.UI.setAttribute("back_button_panel","active",false)
  --   self.UI.setAttribute("player_actions_panel","visibility","")
  --   disableDialButtons()
  --   showMe()
  --   if GD.state.flipped then flipMe() end
  -- elseif params.state == "game_start" then
  --   if not(GD.state.flipped) then flipMe() end
  --   disableDialButtons()
	-- 	showMe()
  -- elseif params.state == "free_action" then
  --   local entry = {
  --     type = "free",
  --     action_id = g_actions["free"][1].id,
  --     label = g_actions["free"][1].label,
  --     status = ""
  --   }
  --   table.insert(GD.state.actions, entry)
  --   updateUI()
  -- elseif params.state == "complete_action" then
  --   local action_id = params.action_id
  --   for _,action in ipairs(GD.state.actions) do
  --     if action.action_id == params.action_id and action.status ~= "Done" then
  --       action.status = "Done"
  --       updateUI()
  --       break
  --     end
  --   end
  -- elseif params.state == "undo_action" then
  --   local action_id = params.action_id
  --   for _,action in ipairs(GD.state.actions) do
  --     if action.action_id == params.action_id and action.status == "Done" then
  --       action.status = ""
  --       updateUI()
  --       break
  --     end
  --   end
  -- elseif params.state == "fail_action" then
  --   local action_id = params.action_id
  --   for _,action in ipairs(GD.state.actions) do
  --     if action.action_id == params.action_id and action.status ~= "Incomplete" then
  --       action.status = "Incomplete"
  --       updateUI()
  --       break
  --     end
  --   end
  -- else
  --   log(gid..": ERROR: setState() unknown state: "..tostring(params.state))
  -- end
end

--[[ *****************************
Enable dial buttons.
********************************]]
function enableDialButtons()
  if env.test.trace then log(gid..": enableDialButtons()") end
  for i=1,9 do
    self.UI.setAttribute("dialBtnPnl_"..tostring(i),"active",true)
  end
  GD.state.buttons_enabled = true
end

--[[ *****************************
Disable dial buttons.
********************************]]
function disableDialButtons()
  if env.test.trace then log(gid..": disableDialButtons()") end
  for i=1,9 do
    self.UI.setAttribute("dialBtnPnl_"..tostring(i),"active",false)
  end
  GD.state.buttons_enabled = false
end

--[[ *****************************
Enable dial back button (Modify).
********************************]]
function enableBackButton()
  if env.test.trace then log(gid..": enableBackButton()") end
  self.UI.setAttribute("back_button_panel","active",true)
  GD.state.back_button_enabled = true
end

--[[ *****************************
Disable dial back button (Modify).
********************************]]
function disableBackButton()
  if env.test.trace then log(gid..": disableBackButton()") end
  self.UI.setAttribute("back_button_panel","active",false)
  GD.state.back_button_enabled = false
end

--[[ *****************************
Enable dial action UI
********************************]]
function enableActionUI()
  if env.test.trace then log(gid..": enableActionUI()") end
  self.UI.setAttribute("player_actions_panel","active",true)
  GD.state.action_UI_enabled = true
end

--[[ *****************************
Disable dial action UI
********************************]]
function disableActionUI()
  if env.test.trace then log(gid..": enableActionUI()") end
  self.UI.setAttribute("player_actions_panel","active",false)
  GD.state.action_UI_enabled = false
end

--[[ ******* TODO DEPRECATED *******
Handler for modify button click (back of dial).
Flip face up and set state back to action selection.
Clears actions in player data (Global)
********************************]]
function modifyClick(player, btn, id)
  log("modifyClick is DEPRECATED")
  -- if env.test.trace then log(gid..": modifyClick(): id="..tostring(id)) end
  -- if player.color ~= GD.color then return end
  -- hideMe()
  -- enableDialButtons()
  -- flipMe()
  -- --call Global to clear player data & disable Done
  -- local p = {command="clear", player_color=player.color,}
  -- Global.call("updatePlayerActionSelection",p)
  -- GD.state.stage = "select_actions"
end

--[[ *****************************
Handler for dial button clicks.
Player is selecting actions on dial.
********************************]]
function dialClick(player, btn, id)
  if env.test.trace then log(gid..": dialClick(): id="..tostring(id)) end
  -- local mnemonic = Split(id,'_')[1]
  local dial_index = tonumber(Split(id,'_')[2])
  assert(dial_index, gid..": ERROR: dialClick() no button dial_index found, btn id: "..tostring(id))
  local pointer_id = ""
  if GD.state.extra_action then
    pointer_id = "pointer-extra"
  elseif GD.state.click == 1 or GD.state.click == 0 then
    pointer_id = "pointer-1"
    GD.state.click = 2
  elseif GD.state.click == 2 then
    pointer_id = "pointer-2"
    GD.state.click = 1
  else
    log(gid..": ERROR: dialClick() invalid click state")
    return
  end
  local p = {
    player_color = player.color,
    dial_index = dial_index,
    pointer_id = pointer_id
  }
  setPointerRotation(pointer_id, dial_index)
  Global.call("addDialAction",p)
end

--[[ *****************************
Set Pointer rotation.
index: into module global list of rotation values.
********************************]]
function setPointerRotation(id, index)
  if env.test.trace then log(gid..":setPointerRotation() id = "..tostring(id)..", index = "..tostring(index)) end
  local decals = self.getDecals()
  local rot = self.getRotation()
  local offset = g_pointer_rot_offsets[index]
  assert(decals[1] ~= nil and decals[1].name == "pointer-1", gid..": ERROR: setPointerRotation(): Invalid pointer 1 decal")
  assert(decals[2] ~= nil and decals[2].name == "pointer-2", gid..": ERROR: setPointerRotation(): Invalid pointer 2 decal")

  --TODO: save pointer rotations for restore from saved state or are decals preserved in game save?

  if id == decals[1].name then
    decals[1].rotation.z = rot.z + offset
  elseif id == decals[2].name then
    decals[2].rotation.z = rot.z + offset
  else
    log(gid..": ERROR: setPointerRotation(): Decal id "..tostring(id).." not found")
    return
  end
  self.setDecals(decals)
end

--[[ *****************************
Hide this dial from other players.
Only visible to owning player.
********************************]]
function hideMe()
  if env.test.trace then log(gid..":hideMe()") end
  self.setInvisibleTo(GD.hide_from_players)
  self.UI.setAttribute("player_actions_panel", "visibility", GD.color)
  GD.state.hidden = true
end

--[[ *****************************
Show this dial to all players.
********************************]]
function showMe()
  if env.test.trace then log(gid..":showMe()") end
  self.setInvisibleTo({})
  self.UI.setAttribute("player_actions_panel", "visibility", "")
  GD.state.hidden = false
end

--[[ *****************************
Flip this dial.
Hide/Show actions UI panel active based on state.
********************************]]
function flipMe()
  if env.test.trace then log(gid..":flipMe()") end
  -- if not(GD.state.flipped) then
  --   --turn display off before flipping to avoid weird UI movement
  --   self.UI.setAttribute("player_actions_panel","active",false)
  -- end
  GD.state.flipped = not(GD.state.flipped)
  self.setLock(false)
  self.flip()
  Wait.condition(function()
    self.setLock(true)
    if GD.state.flipped then
      disableActionUI()
    else
      enableActionUI()
    end
    -- self.UI.setAttribute("player_actions_panel","active",not(GD.state.flipped))
  end, function() return self.resting end, 3)
end

--[[ *****************************
Log state data for debugging
  params: optional array of parameters
  params.child_path - child levels to append to 'GD'
        Use '|' to separate levels
        Example: '|state|actions'
              or 'state|actions'
  Defaults to log all of GD if no params.
  Limitations: only works with string keys, not numeric indexes
********************************]]
function dumpData(params)
  log("dumpData(): State data for "..self.getGUID()..": "..GD.color)
  if params then
    log(params)
    assert(params.child_path ~= nil,"ERROR: dumpData() missing 'params.child_path'")
    local children = Split(params.child_path,'|')
    local result = simpleDeepCopy(GD)
    for _,child in ipairs(children) do
      if child ~= "" then result = result[child] end
    end
    log(result)
  else
    log(GD)
  end
end

require("tts-lib/utils")
