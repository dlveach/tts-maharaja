--[[///////////////////////////////////////////////////////////////////////////////////////////////
Maharaja player action dial

  --TODO:
    - object UI wrapper
    - save/load/restore state
    - connections to Global

///////////////////////////////////////////////////////////////////////////////////////////////////]]


g_buttons = {"track","coins","character","palace-house","palace","quarry","move","2-houses","house",}
g_pointer_rot_offsets = {184,142,104,64,28,-15,-55,-95,-135}
g_pointer = {
  name = "pointer-1",
  url = "http://cloud-3.steamusercontent.com/ugc/2019340792116360259/E5713D1160D784E5B340DCF8D114569C9E560938/",
  position = Vector(0.01,0.1,-0.05),
  rotation = Vector(90, 180, 0),
  scale = Vector(2,2,1),
}
g_back_decal = {
  name = "dial_back",
  url = "http://cloud-3.steamusercontent.com/ugc/2019340792119743844/FBF1CD3789663DD96F5C9D218ED931973551A259/",
  position = Vector(0.08,-0.06,-0.03),
  rotation = Vector(270,0,0),
  scale = Vector(5.1,5.1,1),
}
g_player_colors = {"Yellow","Red","Green","Blue","Purple"}

env = {}
env.test = {}
env.test.force_fresh_save = true
env.test.trace = true
env.test.debug = true

--[[ *****************************
Load function
********************************]]
function onLoad(save_state)
  GD = {}
  GD.color = self.getName()
  if save_state ~= "" then
    if env.test.trace then log(GD.color..": onLoad(): Loading from saved state") end
    local restore_data = JSON.decode(saved_data)
    GD = restore_data

    --TODO: restore UI state
    --TODO: do decals survive reload?

  else
    if env.test.trace then log(GD.color..": onLoad(): Loading from fresh state") end
    GD.state = {}
    GD.state.action_1 = 0
    GD.state.action_2 = 0
    GD.state.click = 0
    --setup visibility string
    GD.hide_from_players = {}
    for _,pcol in ipairs(g_player_colors) do
      if pcol ~= GD.color then
        table.insert(GD.hide_from_players, pcol)
      end
    end
    --setup dial decals
    self.setDecals({})
    local p = simpleDeepCopy(g_pointer)
    p.name = "pointer-1"
    self.addDecal(p)
    p.name = "pointer-2"
    self.addDecal(p)
    self.addDecal(g_back_decal)
    --setup button visiblity
    for _,btn in ipairs(g_buttons) do
      self.UI.setAttribute(btn.."_panel","visibility",GD.color)
    end
    resetPlayerButtons()
  end
end

--[[ *****************************
--TODO: document
********************************]]
function onSave()
  local saved_data = JSON.encode(GD)
  if env.test.force_fresh_save then
    saved_data = ""
  end
  return saved_data
end

function resetPlayerButtons()
  self.UI.setAttribute("confirm","active",false)
  self.UI.setAttribute("player_btn_panel","visibility",GD.color)
  self.UI.setAttribute("back_button_panel","visibility",GD.color)
  self.UI.setAttribute("action_A_row","active",false)
  self.UI.setAttribute("action-A","active",false)
  self.UI.setAttribute("action_B_row","active",false)
  self.UI.setAttribute("action-B","active",false)
  self.UI.setAttribute("action_C_row","active",false)
  self.UI.setAttribute("action-C","active",false)
end

--[[ *****************************
--TODO: document
********************************]]
function  resetActionPointers()
  if env.test.trace then log(GD.color..": resetActionPointers()") end
  local decals = self.getDecals()
  local rot = self.getRotation()
  assert(decals[1] ~= nil and decals[1].name == "pointer-1", GD.color..": ERROR: setPointerRotation(): Invalid pointer 1 decal")
  assert(decals[2] ~= nil and decals[2].name == "pointer-2", GD.color..": ERROR: setPointerRotation(): Invalid pointer 2 decal")
  decals[1].rotation.z = rot.z + 180
  decals[2].rotation.z = rot.z + 180
  self.setDecals(decals)
end

--[[ *****************************
--TODO: document
********************************]]
function setToActivePlayer()
  if env.test.trace then log(GD.color..": setToActivePlayer()") end
  disableDialButtons()
  if GD.state.flipped then flipMe() end
  showMe()
end

--[[ *****************************
--TODO: document
********************************]]
function setToActionSelection()
  if env.test.trace then log(GD.color..": setToActionSelection()") end
  self.UI.setAttribute("back_button_panel","active",true)
  GD.state.action_1 = 0
  GD.state.action_2 = 0
  GD.state.click = 0
  endableDialButtons()
  resetPlayerButtons()
  resetActionPointers()
  if GD.state.flipped then flipMe() end
end

--[[ *****************************
--TODO: document
********************************]]
function endableDialButtons()
  if env.test.trace then log(GD.color..": endableDialButtons()") end
  for _,action in ipairs(g_buttons) do
    self.UI.setAttribute(action.."_panel","active","true")
  end
end

--[[ *****************************
--TODO: document
********************************]]
function disableDialButtons()
  if env.test.trace then log(GD.color..": disableDialButtons()") end
  for _,action in ipairs(g_buttons) do
    self.UI.setAttribute(action.."_panel","active","false")
  end
end

--[[ *****************************
--TODO: document
********************************]]
function lockActionSelections()
  if env.test.trace then log(GD.color..": lockActionSelections()") end
  self.UI.setAttribute("back_button_panel","active",false)
end

--[[ *****************************
--TODO: document
********************************]]
function buttonClick(player, btn, id)
  if env.test.trace then log(GD.color..": buttonClick(): id="..tostring(id)) end
  if player.color ~= GD.color then return end
  if id == "confirm" then
    disableDialButtons()
    flipMe()
    Wait.condition(function() showMe() end, function() return self.resting end, 3)

    --TODO:
    log("TODO: call global to set player action selections")

  elseif id =="unconfirm" then
    --TODO:
    log("TODO: call global to unset player action selection")
    hideMe()
    endableDialButtons()
    flipMe()
  elseif id == "action-A" then
    log("TODO: handle action A")
    self.UI.setAttribute("action-A","active",false)
  elseif id == "action-B" then
    log("TODO: handle action B")
    self.UI.setAttribute("action-B","active",false)
  elseif id == "action-C" then
    log("TODO: handle action C")
    self.UI.setAttribute("action-C","active",false)
  else
    log("ERROR: unknown button id")
  end
end

--[[ *****************************
--TODO: document
********************************]]
function dialClick(player, btn, id)
  if env.test.trace then log(GD.color..": dialClick(): id="..tostring(id)) end
  local action = Split(id,'_')[1]
  local index = indexOf(g_buttons,action)
  local id = ""
  assert(index > 0, GD.color..": ERROR: dialClick() no button index found for action")
  if GD.state.extra_action then
    --TODO: handle this
  end
  if GD.state.click == 1 or GD.state.click == 0 then
    GD.state.action_1 = index
    id = "pointer-1"
    self.UI.setAttribute("action_A_txt","text",action)
    self.UI.setAttribute("action_A_row","active",true)
    self.UI.setAttribute("action-A","active",true)
    GD.state.click = 2
  else
    GD.state.action_2 = index
    id = "pointer-2"
    GD.state.click = 1
    self.UI.setAttribute("action_B_txt","text",action)
    self.UI.setAttribute("action_B_row","active",true)
    self.UI.setAttribute("action-B","active",true)
    self.UI.setAttribute("confirm","active",true)
  end
  setPointerRotation(id, index)
  self.UI.setAttribute("player_btn_panel","active","true")
end

--[[ *****************************
--TODO: document
********************************]]
function setPointerRotation(id, index)
  local decals = self.getDecals()
  local rot = self.getRotation()
  local offset = g_pointer_rot_offsets[index]
  assert(decals[1] ~= nil and decals[1].name == "pointer-1", GD.color..": ERROR: setPointerRotation(): Invalid pointer 1 decal")
  assert(decals[2] ~= nil and decals[2].name == "pointer-2", GD.color..": ERROR: setPointerRotation(): Invalid pointer 2 decal")
  if id == decals[1].name then
    decals[1].rotation.z = rot.z + offset
  elseif id == decals[2].name then
    decals[2].rotation.z = rot.z + offset
  else
    log(GD.color..": ERROR: setPointerRotation(): Decal id "..tostring(id).." not found")
    return
  end
  self.setDecals(decals)
end

--[[ *****************************
--TODO: document
********************************]]
function hideMe()
  self.setInvisibleTo(GD.hide_from_players)
end

--[[ *****************************
--TODO: document
********************************]]
function showMe()
  self.setInvisibleTo({})
end

--[[ *****************************
--TODO: document
********************************]]
function flipMe()
  if GD.state.flipped then
    GD.state.flipped = false
  else
    self.UI.setAttribute("player_btn_panel","active",false)
    GD.state.flipped = true
  end
  self.setLock(false)
  self.flip()
  Wait.condition(function()
    self.setLock(true)
    if not(GD.state.flipped) then
      self.UI.setAttribute("player_btn_panel","active",true)
    end
  end, function() return self.resting end, 3)
end

--[[ *****************************
--TODO: document
********************************]]
function dumpData(params)
  log("State data for "..self.getGUID()..": "..GD.color)
  log(GD)
end

require("tts-lib/utils")
